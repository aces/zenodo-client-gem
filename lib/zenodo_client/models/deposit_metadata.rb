=begin
#Zenodo API

#This is for the zenodo API http://developers.zenodo.org/#rest-api

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'date'

module ZenodoClient
  class DepositMetadata
    attr_accessor :upload_type

    attr_accessor :publication_type

    attr_accessor :image_type

    attr_accessor :publication_date

    attr_accessor :title

    attr_accessor :creators

    attr_accessor :description

    attr_accessor :access_right

    attr_accessor :license

    attr_accessor :embargo_date

    attr_accessor :access_conditions

    attr_accessor :doi

    attr_accessor :prereserve_doi

    attr_accessor :keywords

    attr_accessor :notes

    attr_accessor :related_identifiers

    attr_accessor :contributors

    attr_accessor :references

    attr_accessor :communities

    attr_accessor :grants

    attr_accessor :journal_title

    attr_accessor :journal_volume

    attr_accessor :journal_issue

    attr_accessor :journal_pages

    attr_accessor :conference_title

    attr_accessor :conference_acronym

    attr_accessor :conference_dates

    attr_accessor :conference_place

    attr_accessor :conference_url

    attr_accessor :conference_session

    attr_accessor :conference_session_part

    attr_accessor :imprint_publisher

    attr_accessor :imprint_isbn

    attr_accessor :imprint_place

    attr_accessor :partof_title

    attr_accessor :partof_pages

    attr_accessor :thesis_supervisors

    attr_accessor :thesis_university

    attr_accessor :subjects

    attr_accessor :version

    attr_accessor :language

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'upload_type' => :'upload_type',
        :'publication_type' => :'publication_type',
        :'image_type' => :'image_type',
        :'publication_date' => :'publication_date',
        :'title' => :'title',
        :'creators' => :'creators',
        :'description' => :'description',
        :'access_right' => :'access_right',
        :'license' => :'license',
        :'embargo_date' => :'embargo_date',
        :'access_conditions' => :'access_conditions',
        :'doi' => :'doi',
        :'prereserve_doi' => :'prereserve_doi',
        :'keywords' => :'keywords',
        :'notes' => :'notes',
        :'related_identifiers' => :'related_identifiers',
        :'contributors' => :'contributors',
        :'references' => :'references',
        :'communities' => :'communities',
        :'grants' => :'grants',
        :'journal_title' => :'journal_title',
        :'journal_volume' => :'journal_volume',
        :'journal_issue' => :'journal_issue',
        :'journal_pages' => :'journal_pages',
        :'conference_title' => :'conference_title',
        :'conference_acronym' => :'conference_acronym',
        :'conference_dates' => :'conference_dates',
        :'conference_place' => :'conference_place',
        :'conference_url' => :'conference_url',
        :'conference_session' => :'conference_session',
        :'conference_session_part' => :'conference_session_part',
        :'imprint_publisher' => :'imprint_publisher',
        :'imprint_isbn' => :'imprint_isbn',
        :'imprint_place' => :'imprint_place',
        :'partof_title' => :'partof_title',
        :'partof_pages' => :'partof_pages',
        :'thesis_supervisors' => :'thesis_supervisors',
        :'thesis_university' => :'thesis_university',
        :'subjects' => :'subjects',
        :'version' => :'version',
        :'language' => :'language'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'upload_type' => :'Object',
        :'publication_type' => :'Object',
        :'image_type' => :'Object',
        :'publication_date' => :'String',
        :'title' => :'String',
        :'creators' => :'Array<Author>',
        :'description' => :'String',
        :'access_right' => :'Object',
        :'license' => :'String',
        :'embargo_date' => :'DateTime',
        :'access_conditions' => :'String',
        :'doi' => :'String',
        :'prereserve_doi' => :'Object',
        :'keywords' => :'Array<String>',
        :'notes' => :'String',
        :'related_identifiers' => :'Array<RelatedIdentifier>',
        :'contributors' => :'Array<Contributor>',
        :'references' => :'Array<String>',
        :'communities' => :'Array<Community>',
        :'grants' => :'Array<Grant>',
        :'journal_title' => :'String',
        :'journal_volume' => :'String',
        :'journal_issue' => :'String',
        :'journal_pages' => :'String',
        :'conference_title' => :'String',
        :'conference_acronym' => :'String',
        :'conference_dates' => :'String',
        :'conference_place' => :'String',
        :'conference_url' => :'String',
        :'conference_session' => :'String',
        :'conference_session_part' => :'String',
        :'imprint_publisher' => :'String',
        :'imprint_isbn' => :'String',
        :'imprint_place' => :'String',
        :'partof_title' => :'String',
        :'partof_pages' => :'String',
        :'thesis_supervisors' => :'Array<Author>',
        :'thesis_university' => :'String',
        :'subjects' => :'Array<Subject>',
        :'version' => :'String',
        :'language' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'upload_type')
        self.upload_type = attributes[:'upload_type']
      end

      if attributes.has_key?(:'publication_type')
        self.publication_type = attributes[:'publication_type']
      end

      if attributes.has_key?(:'image_type')
        self.image_type = attributes[:'image_type']
      end

      if attributes.has_key?(:'publication_date')
        self.publication_date = attributes[:'publication_date']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'creators')
        if (value = attributes[:'creators']).is_a?(Array)
          self.creators = value
        end
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'access_right')
        self.access_right = attributes[:'access_right']
      end

      if attributes.has_key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.has_key?(:'embargo_date')
        self.embargo_date = attributes[:'embargo_date']
      end

      if attributes.has_key?(:'access_conditions')
        self.access_conditions = attributes[:'access_conditions']
      end

      if attributes.has_key?(:'doi')
        self.doi = attributes[:'doi']
      end

      if attributes.has_key?(:'prereserve_doi')
        self.prereserve_doi = attributes[:'prereserve_doi']
      end

      if attributes.has_key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.has_key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.has_key?(:'related_identifiers')
        if (value = attributes[:'related_identifiers']).is_a?(Array)
          self.related_identifiers = value
        end
      end

      if attributes.has_key?(:'contributors')
        if (value = attributes[:'contributors']).is_a?(Array)
          self.contributors = value
        end
      end

      if attributes.has_key?(:'references')
        if (value = attributes[:'references']).is_a?(Array)
          self.references = value
        end
      end

      if attributes.has_key?(:'communities')
        if (value = attributes[:'communities']).is_a?(Array)
          self.communities = value
        end
      end

      if attributes.has_key?(:'grants')
        if (value = attributes[:'grants']).is_a?(Array)
          self.grants = value
        end
      end

      if attributes.has_key?(:'journal_title')
        self.journal_title = attributes[:'journal_title']
      end

      if attributes.has_key?(:'journal_volume')
        self.journal_volume = attributes[:'journal_volume']
      end

      if attributes.has_key?(:'journal_issue')
        self.journal_issue = attributes[:'journal_issue']
      end

      if attributes.has_key?(:'journal_pages')
        self.journal_pages = attributes[:'journal_pages']
      end

      if attributes.has_key?(:'conference_title')
        self.conference_title = attributes[:'conference_title']
      end

      if attributes.has_key?(:'conference_acronym')
        self.conference_acronym = attributes[:'conference_acronym']
      end

      if attributes.has_key?(:'conference_dates')
        self.conference_dates = attributes[:'conference_dates']
      end

      if attributes.has_key?(:'conference_place')
        self.conference_place = attributes[:'conference_place']
      end

      if attributes.has_key?(:'conference_url')
        self.conference_url = attributes[:'conference_url']
      end

      if attributes.has_key?(:'conference_session')
        self.conference_session = attributes[:'conference_session']
      end

      if attributes.has_key?(:'conference_session_part')
        self.conference_session_part = attributes[:'conference_session_part']
      end

      if attributes.has_key?(:'imprint_publisher')
        self.imprint_publisher = attributes[:'imprint_publisher']
      end

      if attributes.has_key?(:'imprint_isbn')
        self.imprint_isbn = attributes[:'imprint_isbn']
      end

      if attributes.has_key?(:'imprint_place')
        self.imprint_place = attributes[:'imprint_place']
      end

      if attributes.has_key?(:'partof_title')
        self.partof_title = attributes[:'partof_title']
      end

      if attributes.has_key?(:'partof_pages')
        self.partof_pages = attributes[:'partof_pages']
      end

      if attributes.has_key?(:'thesis_supervisors')
        if (value = attributes[:'thesis_supervisors']).is_a?(Array)
          self.thesis_supervisors = value
        end
      end

      if attributes.has_key?(:'thesis_university')
        self.thesis_university = attributes[:'thesis_university']
      end

      if attributes.has_key?(:'subjects')
        if (value = attributes[:'subjects']).is_a?(Array)
          self.subjects = value
        end
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'language')
        self.language = attributes[:'language']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @upload_type.nil?
        invalid_properties.push('invalid value for "upload_type", upload_type cannot be nil.')
      end

      if @publication_date.nil?
        invalid_properties.push('invalid value for "publication_date", publication_date cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @creators.nil?
        invalid_properties.push('invalid value for "creators", creators cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @access_right.nil?
        invalid_properties.push('invalid value for "access_right", access_right cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @upload_type.nil?
      return false if @publication_date.nil?
      return false if @title.nil?
      return false if @creators.nil?
      return false if @description.nil?
      return false if @access_right.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          upload_type == o.upload_type &&
          publication_type == o.publication_type &&
          image_type == o.image_type &&
          publication_date == o.publication_date &&
          title == o.title &&
          creators == o.creators &&
          description == o.description &&
          access_right == o.access_right &&
          license == o.license &&
          embargo_date == o.embargo_date &&
          access_conditions == o.access_conditions &&
          doi == o.doi &&
          prereserve_doi == o.prereserve_doi &&
          keywords == o.keywords &&
          notes == o.notes &&
          related_identifiers == o.related_identifiers &&
          contributors == o.contributors &&
          references == o.references &&
          communities == o.communities &&
          grants == o.grants &&
          journal_title == o.journal_title &&
          journal_volume == o.journal_volume &&
          journal_issue == o.journal_issue &&
          journal_pages == o.journal_pages &&
          conference_title == o.conference_title &&
          conference_acronym == o.conference_acronym &&
          conference_dates == o.conference_dates &&
          conference_place == o.conference_place &&
          conference_url == o.conference_url &&
          conference_session == o.conference_session &&
          conference_session_part == o.conference_session_part &&
          imprint_publisher == o.imprint_publisher &&
          imprint_isbn == o.imprint_isbn &&
          imprint_place == o.imprint_place &&
          partof_title == o.partof_title &&
          partof_pages == o.partof_pages &&
          thesis_supervisors == o.thesis_supervisors &&
          thesis_university == o.thesis_university &&
          subjects == o.subjects &&
          version == o.version &&
          language == o.language
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [upload_type, publication_type, image_type, publication_date, title, creators, description, access_right, license, embargo_date, access_conditions, doi, prereserve_doi, keywords, notes, related_identifiers, contributors, references, communities, grants, journal_title, journal_volume, journal_issue, journal_pages, conference_title, conference_acronym, conference_dates, conference_place, conference_url, conference_session, conference_session_part, imprint_publisher, imprint_isbn, imprint_place, partof_title, partof_pages, thesis_supervisors, thesis_university, subjects, version, language].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ZenodoClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
