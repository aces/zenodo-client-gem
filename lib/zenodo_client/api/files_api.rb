=begin
#Zenodo API

#This is for the zenodo API http://developers.zenodo.org/#rest-api

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module ZenodoClient
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new file
    # 
    # @param deposit_id 
    # @param [Hash] opts the optional parameters
    # @option opts [UploadFile] :upload_file 
    # @return [DepositionFile]
    def create_file(deposit_id, opts = {})
      data, _status_code, _headers = create_file_with_http_info(deposit_id, opts)
      data
    end

    # Create a new file
    # 
    # @param deposit_id 
    # @param [Hash] opts the optional parameters
    # @option opts [UploadFile] :upload_file 
    # @return [Array<(DepositionFile, Fixnum, Hash)>] DepositionFile data, response status code and response headers
    def create_file_with_http_info(deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.create_file ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.create_file"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files'.sub('{' + 'depositId' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'upload_file'])
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DepositionFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#create_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an existing deposition file resource. Note, only deposition files for unpublished depositions may be deleted.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [DepositionFile]
    def delete_file(deposit_id, file_id, opts = {})
      data, _status_code, _headers = delete_file_with_http_info(deposit_id, file_id, opts)
      data
    end

    # Delete an existing deposition file resource. Note, only deposition files for unpublished depositions may be deleted.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DepositionFile, Fixnum, Hash)>] DepositionFile data, response status code and response headers
    def delete_file_with_http_info(deposit_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.delete_file ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.delete_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.delete_file"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files/{fileId}'.sub('{' + 'depositId' + '}', deposit_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DepositionFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a single deposition file.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [DepositionFile]
    def get_file(deposit_id, file_id, opts = {})
      data, _status_code, _headers = get_file_with_http_info(deposit_id, file_id, opts)
      data
    end

    # Retrieve a single deposition file.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DepositionFile, Fixnum, Hash)>] DepositionFile data, response status code and response headers
    def get_file_with_http_info(deposit_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.get_file ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.get_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.get_file"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files/{fileId}'.sub('{' + 'depositId' + '}', deposit_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DepositionFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#get_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List of files for deposit
    # 
    # @param deposit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<DepositionFile>]
    def list_files_for_deposit(deposit_id, opts = {})
      data, _status_code, _headers = list_files_for_deposit_with_http_info(deposit_id, opts)
      data
    end

    # List of files for deposit
    # 
    # @param deposit_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DepositionFile>, Fixnum, Hash)>] Array<DepositionFile> data, response status code and response headers
    def list_files_for_deposit_with_http_info(deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.list_files_for_deposit ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.list_files_for_deposit"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files'.sub('{' + 'depositId' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DepositionFile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#list_files_for_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sort the files for a deposit
    # 
    # @param deposit_id 
    # @param deposit_file The order of files, use only the id portion of the array of files
    # @param [Hash] opts the optional parameters
    # @return [Array<DepositionFile>]
    def sort_files(deposit_id, deposit_file, opts = {})
      data, _status_code, _headers = sort_files_with_http_info(deposit_id, deposit_file, opts)
      data
    end

    # Sort the files for a deposit
    # 
    # @param deposit_id 
    # @param deposit_file The order of files, use only the id portion of the array of files
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DepositionFile>, Fixnum, Hash)>] Array<DepositionFile> data, response status code and response headers
    def sort_files_with_http_info(deposit_id, deposit_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.sort_files ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.sort_files"
      end
      # verify the required parameter 'deposit_file' is set
      if @api_client.config.client_side_validation && deposit_file.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_file' when calling FilesApi.sort_files"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files'.sub('{' + 'depositId' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deposit_file)
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DepositionFile>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#sort_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a deposition file resource. Currently the only use is renaming an already uploaded file. If you want to replace the actual file, please delete the file and upload a new file.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param deposit_file 
    # @param [Hash] opts the optional parameters
    # @return [DepositionFile]
    def update_file(deposit_id, file_id, deposit_file, opts = {})
      data, _status_code, _headers = update_file_with_http_info(deposit_id, file_id, deposit_file, opts)
      data
    end

    # Update a deposition file resource. Currently the only use is renaming an already uploaded file. If you want to replace the actual file, please delete the file and upload a new file.
    # 
    # @param deposit_id 
    # @param file_id 
    # @param deposit_file 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DepositionFile, Fixnum, Hash)>] DepositionFile data, response status code and response headers
    def update_file_with_http_info(deposit_id, file_id, deposit_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.update_file ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling FilesApi.update_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.update_file"
      end
      # verify the required parameter 'deposit_file' is set
      if @api_client.config.client_side_validation && deposit_file.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_file' when calling FilesApi.update_file"
      end
      # resource path
      local_var_path = '/deposit/depositions/{depositId}/files/{fileId}'.sub('{' + 'depositId' + '}', deposit_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(deposit_file)
      auth_names = ['access_token']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DepositionFile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#update_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
